---
- name: Deploy Todo Application
  hosts: all
  become: yes
  vars:
    docker_compose_version: "1.29.2"
    backend_image: "shageeth/to-do-application-backend:latest"
    frontend_image: "shageeth/to-do-application-frontend:latest"
    app_dir: "/opt/todo-app"
  
  tasks:
    # Amazon Linux detection
    - name: Detect Amazon Linux
      command: cat /etc/os-release
      register: os_release
      changed_when: false
    
    - name: Set OS facts
      set_fact:
        is_amazon_linux: "{{ 'Amazon Linux' in os_release.stdout }}"
        is_debian: "{{ ansible_os_family == 'Debian' if ansible_os_family is defined else false }}"
        is_redhat: "{{ ansible_os_family == 'RedHat' if ansible_os_family is defined else false }}"
    
    - name: Debug OS detection
      debug:
        msg: "Detected OS: {{ 'Amazon Linux' if is_amazon_linux else ansible_os_family | default('Unknown') }}"

    # Package management for Debian
    - name: Update apt cache (Debian)
      apt:
        update_cache: yes
      when: is_debian
      
    # Package management for Amazon Linux
    - name: Update yum cache (Amazon Linux)
      command: yum makecache
      changed_when: false
      when: is_amazon_linux

    - name: Install Docker (Amazon Linux)
      command: amazon-linux-extras install docker -y
      when: is_amazon_linux
      
    - name: Install Python and Git (Amazon Linux)
      command: yum install -y python3-pip git
      when: is_amazon_linux
    
    # Package management for Debian
    - name: Install required packages (Debian)
      apt:
        name:
          - docker.io
          - python3-pip
          - git
        state: present
      when: is_debian

    # Package management for RedHat (non-Amazon)
    - name: Install required packages (RedHat)
      yum:
        name:
          - docker
          - python3-pip
          - git
        state: present
      when: is_redhat and not is_amazon_linux

    # Common tasks for all distributions
    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Make docker-compose executable
      command: chmod +x /usr/local/bin/docker-compose
      changed_when: false

    - name: Start and enable Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'

    - name: Create docker-compose.yml
      template:
        src: ../templates/docker-compose.yml.j2
        dest: "{{ app_dir }}/docker-compose.yml"
      
    - name: Check if Docker Hub credentials are available
      set_fact:
        docker_hub_username: "{{ lookup('env', 'DOCKER_HUB_USERNAME', default='') }}"
        docker_hub_password: "{{ lookup('env', 'DOCKER_HUB_PASSWORD', default='') }}"
      no_log: true

    - name: Login to Docker Hub (if credentials are available)
      shell: "docker login -u {{ docker_hub_username }} -p {{ docker_hub_password }}"
      no_log: true
      when: docker_hub_username != '' and docker_hub_password != ''
      ignore_errors: yes
      register: docker_login_result
      
    - name: Docker Hub login status
      debug:
        msg: "Docker Hub login {{ 'succeeded' if docker_login_result.rc|default(1) == 0 else 'failed or skipped, will try to pull images without authentication' }}"
      when: docker_login_result is defined
      
    - name: Pull MongoDB image (this should work as it's a standard image)
      shell: "docker pull mongo:latest"
      ignore_errors: yes

    - name: Create source code directory
      file:
        path: "/opt/todo-app-source"
        state: directory
        mode: '0755'

    - name: Clone the application repository
      git:
        repo: "https://github.com/VSHAGEETHPRATHEEP06/To-Do-Application.git"
        dest: "/opt/todo-app-source"
        version: main
      ignore_errors: yes
      register: git_clone

    - name: Show git clone results
      debug:
        var: git_clone

    - name: Build backend Docker image locally
      shell: "cd /opt/todo-app-source/backend && docker build -t {{ backend_image }} ."
      when: git_clone is succeeded
      ignore_errors: yes

    - name: Build frontend Docker image locally
      shell: "cd /opt/todo-app-source/frontend && docker build -t {{ frontend_image }} ."
      when: git_clone is succeeded
      ignore_errors: yes

    - name: Deploy with Docker Compose
      shell: "cd {{ app_dir }} && docker-compose down && docker-compose up -d"
      register: compose_result
      
    - name: Show Docker Compose deployment result
      debug:
        var: compose_result

    - name: Wait for services to be up
      wait_for:
        host: localhost
        port: 80
        timeout: 300
      ignore_errors: yes

    - name: Check if services are running
      shell: "docker ps"
      register: docker_ps

    - name: Show running containers
      debug:
        var: docker_ps.stdout_lines
        
    - name: Clean up old Docker images
      shell: "docker image prune -af"